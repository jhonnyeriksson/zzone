module GCSE {
  namespace "http://com/example/GCSE";
  prefix GCSE;

  import ietf-inet-types {
    prefix inet;
  }
  import tailf-ncs {
    prefix ncs;
  }
  import tailf-common {
    prefix tailf;
  }

  list GCSE {
    key id;
    uses ncs:service-data;
    ncs:servicepoint "GCSE";
    leaf id {
      tailf:info "Access Service ID";
      type string;
    }
    leaf-list device {
      type leafref {
        path "/ncs:devices/ncs:device/ncs:name";
      }
    }
    container transport_information {
      container options {
        container settings {
          container equipment_information {
            leaf software {
              type string;
            }
            container interface {
              leaf id {
                type string;
              }
            }
          }
          container circuit_information {
            list fttx {
              key transport_service_id;
              leaf transport_service_id {
                tailf:info "Transport Service ID";
                type string;
              }
              leaf encapsulation {
                tailf:info "Encapsulation Type";
                type enumeration {
                  enum dot1q;
                  enum qinq;
                }
              }
              leaf cvlan {
                tailf:info "Customer VLAN";
                type string;
              }
              leaf svlan {
                tailf:info "Service VLAN";
                type string;
              }
            }
          }
        }
      }
    }
    container service_information {
      description "service information";
      leaf service-product {
        tailf:display-status-name "display name";
        tailf:info "Service Product";
        type enumeration  {
          enum internet;
          enum l3vpn;
        }
      }
      container service_bandwidth {
        leaf capacity {
          tailf:info "Bandwidth Capacity";
          type int8;
        }
        leaf unit {
          tailf:info "Unit";
          type string;
        }
      }
      container network_options {
        leaf asn {
          tailf:info "Network ASN";
          type string;
        }
        leaf protocol {
          tailf:info "Network Protocol";
          type string;
        }
        container mpls {
          list tldp {
            key "id";
            leaf id {
              tailf:info "TLDP-ID";
              type string;
            }
            leaf remote_address {
              tailf:info "Remote Peer Address";
              type inet:ipv4-address;
            }
            leaf vcid {
              type int8;
            }
            leaf path_mtu {
              type int8;
            }
          }
          container vpls {
            leaf id {
              type string;
            }
            leaf bridge_domain {
              type string;
            }
            leaf route_distinguisher {
              type string;
            }
            leaf-list route_target_import {
              type string;
            } 
            leaf-list route_target_export {
              type string;
            }
          }
          container vpnv4 {
            leaf vrf {
              type string;
            }
            leaf route_distinguisher {
              type string;
            }
            leaf-list route_target_import {
              type string;
            }
            leaf-list route_target_export {
              type string;
            }
          }
        }
      }
      container service_options {
        leaf active {
          type boolean;
        }
        leaf mode {
          type string;
        }
        leaf nsid {
          type string;
        }
        leaf nokia_service_type {
          type string;
        }
        container ethernet_settings {
          leaf service_mtu {
            type string;
          }
          leaf mac_table_size {
            type string;
          }
          leaf mac_limit {
            type string;
          }
        }
        container ip_settings {
          list ip {
            key address_family;
            leaf address_family {
              type enumeration {
                enum ipv4;
              }
            }
            leaf role {
              type string;
            }
            leaf address {
              type string;
            }
            leaf mask {
              type string;
            }
          }
          container routing {
            leaf protocol {
              type string;
            }
            list bgp {
              key id;
              leaf id {
                type string;
              }
              leaf state {
                type boolean;
              }
              leaf afi {
                type string;
              }
              leaf authentication_key {
                type string;
              }
            }
          }
        }
      }
    }
  }
}
