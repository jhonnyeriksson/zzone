module GCSE {
    namespace "http://com/example/GCSE";
    prefix GCSE;

    import ietf-inet-types {
        prefix inet;
    }
    import tailf-ncs {
        prefix ncs;
    }
    import tailf-common {
        prefix tailf;
    }

    list GCSE {
        key id;
        uses ncs:service-data;
        ncs:servicepoint "GCSE";
        leaf id {
            tailf:info "Access Service ID";
            type string;
        }
        leaf-list device {
            tailf:info "Devices";
            type leafref {
                path "/ncs:devices/ncs:device/ncs:name";
            }
        }
        container transport-information {
            tailf:info "Transport Information";
            leaf registration-status {
                tailf:info "Enable/Disable";
                type boolean;
            }
            container options {
                tailf:info "Transport Options";
                leaf segment {
                    tailf:info "Transport Network Segment";
                    type enumeration {
                        enum GCSE;
                        enum GCNO;
                        enum GCDK;
                        enum INET;
                    }
                }
                container settings {
                    tailf:info "Transport Settings";
                    leaf technology {
                        type enumeration {
                            enum P2P;
                            enum P2MP;
                            enum PWR/P2MP;
                        }
                    }
                    container equipment-information {
                        tailf:info "Equipment Information";
                        list nodes {
                            key "node-type";
                            leaf node-type {
                                type enumeration {
                                    enum PE;
                                    enum CPE;
                                }
                            }
                            list PE {
                                when "../node-type = 'PE'";
                                key "hostname";
                                leaf hostname {
                                    tailf:info "Hostname";
                                    type string;
                                }
                                leaf vendor {
                                    tailf:info "Vendor";
                                    type string;
                                }
                                leaf model {
                                    tailf:info "Model";
                                    type string;
                                }
                                leaf software {
                                    tailf:info "Software";
                                    type string;
                                }
                                list service-transport {
                                    tailf:info "Node Connections";
                                    key "transport-service-id";
                                    leaf transport-service-id {
                                        tailf:info "Transport Service ID";
                                        type string;
                                    }
                                    leaf service-interface {
                                        tailf:info "Service Interface";
                                        type string;
                                    }
                                }
                            }
                            list CPE {
                                when "../node-type = 'CPE'";
                                key "hostname";
                                leaf hostname {
                                    tailf:info "Hostname";
                                    type string;
                                }
                                leaf vendor {
                                    tailf:info "Vendor";
                                    type string;
                                }
                                leaf model {
                                    tailf:info "Model";
                                    type string;
                                }
                                leaf software {
                                    tailf:info "Software";
                                    type string;
                                }
                                list service-transport {
                                    tailf:info "Node Connections";
                                    key "transport-service-id";
                                    leaf transport-service-id {
                                        tailf:info "Transport Service ID";
                                        type string;
                                    }
                                    leaf service-interface {
                                        tailf:info "Service Interface";
                                        type string;
                                    }
                                }
                            }
                        }
                    }
                    container circuit-information {
                        tailf:info "Circuit Information";
                        list fttx {
                            tailf:info "FTTX Circuit";
                            key transport-service-id;
                            leaf transport-service-id {
                                tailf:info "Transport Service ID";
                                type string;
                            }
                            leaf connection-type {
                                tailf:info "Connection Type";
                                type enumeration {
                                    enum uni;
                                    enum nni;
                                }
                            }
                            list encapsulation {
                                key "encapsulation-type";
                                leaf encapsulation-type {
                                    type enumeration {
                                        enum null;
                                        enum dot1q;
                                        enum qinq;
                                    }
                                }
                                choice conditional {
                                    case null {
                                        when "../encapsulation/encapsulation-type = 'null'";
                                    }
                                    case dot1q {
                                        when "../encapsulation/encapsulation-type = 'dot1q'";
                                        leaf cvlan {
                                            type string;
                                        }
                                    }
                                    case qinq {
                                        when "./encapsulation/encapsulation-type = 'qinq'";
                                        leaf cvlan {
                                            type string;
                                        }
                                        leaf svlan {
                                            type string;
                                        }
                                    }
                                } 
                            }
                        }
                    }
                }
            }
        }
        container service-information {
            tailf:info "Service Information";
            container bandwidth {
                leaf capacity {
                    tailf:info "Bandwidth Capacity";
                    type int8;
                }
                leaf unit {
                    tailf:info "Unit";
                    type string;
                }
            }
            container network-options {
                leaf asn {
                    tailf:info "Network ASN";
                    type string;
                }
                leaf protocol {
                    tailf:info "Network Protocol";
                    type enumeration {
                        enum ip;
                        enum tldp;
                        enum vpls;
                        enum vpnv4;
                    }
                }
                choice conditional {
                    case tldp {
                        when "../network-options/protocol = 'tldp'";
                        container tldp {
                            list peer {
                                key "id";
                                leaf id {
                                    tailf:info "TLDP-ID";
                                    type string;
                                }
                                leaf remote_address {
                                    tailf:info "Remote Peer Address";
                                    type inet:ipv4-address;
                                }
                                leaf vcid {
                                    tailf:info "TLDP VCID";
                                    type int8;
                                }
                                leaf path_mtu {
                                    tailf:info "Path MTU";
                                    type int8;
                                }
                            }
                        }
                    }
                    case vpls {
                        when "../network-options/protocol = 'vpls'";
                        container vpls {
                            leaf bridge-domain {
                                tailf:info "Bridge Domain Name";
                                type string;
                            }
                            leaf route-distinguisher {
                                tailf:info "Route Distinguisher";
                                type string;
                            }
                            leaf-list route-target-import {
                                tailf:info "Route Target Import Community";
                                type string;
                            } 
                            leaf-list route-target-export {
                                tailf:info "Route Target Import Community";
                                type string;
                            }
                        }
                    }
                    case vpnv4 {
                        when "../network-options/protocol = 'vpnv4'";
                        container vpnv4 {
                            leaf vrf {
                                tailf:info "VRF Name";
                                type string;
                            }
                            leaf route-distinguisher {
                                tailf:info "Route Distinguisher";
                                type string;
                            }
                            leaf-list route-target-import {
                                tailf:info "Route Target Import Community";
                                type string;
                            }
                            leaf-list route-target-export {
                                tailf:info "Route Target Import Community";
                                type string;
                            }
                        }
                    }
                }
            }
            container service-options {
                leaf active {
                    tailf:info "Service State";
                    type boolean;
                }
                leaf mode {
                    tailf:info "Service Mode";
                    type enumeration {
                        enum routing;
                        enum bridging;
                    }
                }
                leaf nsid {
                    tailf:info "Nokia Service ID";
                    type string;
                }
                leaf nokia-service-type {
                    tailf:info "Nokia Service Type";
                    type string;
                }
                container ethernet-settings {
                    leaf service-mtu {
                        tailf:info "Service MTU";
                        type string;
                    }
                    leaf mac-table-size {
                        tailf:info "MAC Table Size";
                        type string;
                    }
                    leaf mac-limit {
                        tailf:info "MAC Table Limit";
                        type string;
                    }
                }
                container ip-settings {
                    tailf:info "IP Settings";
                    list ip {
                        key address-family;
                        leaf address-family {
                            tailf:info "IP Version";
                            type enumeration {
                                enum ipv4;
                                enum ipv6;
                            }
                        }
                        choice version {
                            case v4 {
                                when "../ip/address-family = 'ipv4'";
                                list network {
                                    key "pfx";
                                    leaf pfx {
                                        tailf:info "IPv4 Network Prefix";
                                        type string;
                                    }
                                    leaf role {
                                        tailf:info "Primary/Secondary";
                                        type enumeration {
                                          enum primary;
                                          enum secondary;
                                        }
                                    }
                                    list hosts {
                                        tailf:info "Host Table";
                                        key "node";
                                        leaf node {
                                          tailf:info "Hostname";
                                          type string;
                                        }
                                        leaf address {
                                          tailf:info "Address";
                                          type string;
                                        }
                                        leaf subnet-mask {
                                          tailf:info "Subnet Mask";
                                          type string;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    container routing {
                        leaf protocol {
                            tailf:info "Routing Protocol";
                            type enumeration {
                                enum bgp;
                                enum static;
                            }
                        }
                        choice routing-protocol {
                            case dymaic {
                                when "../routing/protocol = 'bgp'";
                                container bgp {
                                    list peering {
                                        key "node";
                                        leaf node {
                                            tailf:info "Hostname";
                                            type string;
                                        }
                                        leaf update-source {
                                            tailf:info "Local Update Source";
                                            type string;
                                        }
                                        leaf local-asn {
                                            tailf:info "Local ASN";
                                            type string;
                                        }
                                        leaf remote-address {
                                            tailf:info "Remote Address";
                                            type string;
                                        }
                                        leaf remote-asn {
                                            tailf:info "Remote ASN";
                                            type string;
                                        }
                                        leaf afi {
                                            tailf:info "AFI";
                                            type enumeration {
                                                enum ipv4;
                                            }
                                        }
                                    }
                                }
                            }
                            case manual {
                                when "../routing/protocol = 'static'";
                                container static {
                                    list entry {
                                        key "node";
                                        leaf node {
                                            tailf:info "Hostname";
                                            type string;
                                        }
                                        leaf address {
                                            tailf:info "Network";
                                            type string;
                                        }
                                        leaf subnet-mask {
                                            tailf:info "Subnet-Mask";
                                            type string;
                                        }
                                        leaf next-hop {
                                            tailf:info "Next-Hop";
                                            type string;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
